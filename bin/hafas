#!/usr/bin/env perl
use strict;
use warnings;
use 5.010;

our $VERSION = '0.00';

use Getopt::Long qw(:config no_ignore_case);
use List::Util qw(first max);
use Travel::Routing::DE::HAFAS;

my %train_type;

my ( $date, $time );
my $arrivals    = 0;
my $ignore_late = 0;
my $types       = q{};
my $language;
my $devmode;

my @output;

binmode( STDOUT, ':encoding(utf-8)' );

GetOptions(
	'a|arrivals'    => \$arrivals,
	'd|date=s'      => \$date,
	'h|help'        => sub { show_help(0) },
	'l|lang=s'      => \$language,
	'L|ignore-late' => \$ignore_late,
	'm|mot=s'       => \$types,
	't|time=s'      => \$time,
	'V|version'     => \&show_version,
	'devmode'       => \$devmode,

) or show_help(1);

for my $type ( split( qr{,}, $types ) ) {
	if ( substr( $type, 0, 1 ) eq q{!} ) {
		$train_type{ substr( $type, 1 ) } = 0;
	}
	else {
		$train_type{$type} = 1;
	}
}

my ( $from, $to ) = @ARGV;

my $status = Travel::Routing::DE::HAFAS->new(
	date           => $date,
	developer_mode => $devmode,
	language       => $language,
	mot            => \%train_type,
	from           => $from,
	to             => $to,
	time           => $time,
	mode           => $arrivals ? 'arr' : 'dep',
);

sub show_help {
	my ($code) = @_;

	print 'Usage: hafas [-d <dd.mm.yyyy>] [-t <time>] '
	  . "<from> <to>\n"
	  . "See also: man hafas\n";

	exit $code;
}

sub show_version {
	say "hafas version ${VERSION}";

	exit 0;
}

if ( my $err = $status->errstr ) {
	say STDERR "Request error: ${err}";
	exit 2;
}

sub display_connection {
	my ($c) = @_;

	if ( $c->delay ) {
		printf( "# +%d,  Plan: %s -> %s\n",
			$c->delay, $c->sched_departure_time, $c->sched_arrival_time );
	}
	for my $comment ( $c->comments ) {
		printf( "# %s\n", $comment );
	}

	printf(
		"%-5s ab  %-30s %-20s %s\n",
		$c->departure_time, $c->departure_stop_and_platform,
		$c->line, $c->destination // q{},
	);

	printf( "%-5s an  %s\n", $c->arrival_time, $c->arrival_stop_and_platform, );
	print "\n";
}

sub display_routes {
	my (@routes) = @_;

	for my $i ( 0 .. $#routes ) {
		my $route = $routes[$i];

		say '# ' . $route->service_days;
		if ( $route->delay ) {
			say '# +' . $route->delay;
		}

		for my $connection ( $route->parts ) {
			display_connection($connection);
		}

		if ( $i != $#routes ) {
			print "---------\n\n";
		}
	}
}

display_routes( $status->results );

__END__

=head1 NAME

hafas - Interface to the DeutscheBahn/HAFAS online trip service

=head1 SYNOPSIS

B<hafas> [B<-d> I<date>] [B<-t> I<time>] I<from> I<to>

=head1 VERSION

version 0.00

=head1 DESCRIPTION

hafas is an interface to HAFAS-based trip services, for instance the
one available at L<http://reiseauskunft.bahn.de/bin/query.exe/dn>.

=head1 OPTIONS

=over

=item B<-d>, B<--date> I<dd>.I<mm>.I<yyyy>

Date to list departures for.  Default: today.

=item B<-t>, B<--time> I<hh>:I<mm>

Time to list departures for.  Default: now.

=item B<-V>, B<--version>

Show version information.

=back

=head1 EXIT STATUS

Zero unless things went wrong.

=head1 CONFIGURATION

None.

=head1 DEPENDENCIES

=over

=item * Class::Accessor(3pm)

=item * LWP::UserAgent(3pm)

=item * XML::LibXML(3pm)

=back

=head1 BUGS AND LIMITATIONS

Unknown.

=head1 AUTHOR

Copyright (C) 2015 by Daniel Friesel E<lt>derf@finalrewind.orgE<gt>

=head1 LICENSE

This program is licensed under the same terms as Perl itself.
